import UIKit
import CoreBluetooth

class GlucoseManager: NSObject, CBCentralManagerDelegate, CBPeripheralDelegate {
    var centralManager: CBCentralManager!
    var glucosePeripheral: CBPeripheral?
    var glucoseValue: Double = 0.0
    var monitoringTimer: Timer?
    
    let lowerThreshold: Double = 5.0
    let upperThreshold: Double = 6.6

    override init() {
        super.init()
        centralManager = CBCentralManager(delegate: self, queue: nil)
    }

    func centralManagerDidUpdateState(_ central: CBCentralManager) {
        if central.state == .poweredOn {
            centralManager.scanForPeripherals(withServices: nil, options: nil)
        }
    }

    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String: Any], rssi RSSI: NSNumber) {
        glucosePeripheral = peripheral
        centralManager.connect(peripheral, options: nil)
    }

    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {
        peripheral.delegate = self
        startMonitoringGlucose()
    }

    func startMonitoringGlucose() {
        // Start een timer om elke 5 seconden de glucosewaarden te controleren
        monitoringTimer = Timer.scheduledTimer(timeInterval: 5.0, target: self, selector: #selector(readGlucoseData), userInfo: nil, repeats: true)
    }

    @objc func readGlucoseData() {
        // Hier zou je de glucosewaarden moeten lezen van de CGM
        // Dit is een voorbeeld met een fictieve waarde
        glucoseValue = fetchGlucoseValueFromCGM()
        checkGlucoseAndDeliverInsulin(glucoseValue: glucoseValue)
    }

    func fetchGlucoseValueFromCGM() -> Double {
        // Dit moet worden vervangen door de logica om echte glucosewaarden te lezen
        return Double.random(in: 4.0...8.0) // Voorbeeld random waarde
    }

    func checkGlucoseAndDeliverInsulin(glucoseValue: Double) {
        if glucoseValue < lowerThreshold {
            print("Bloedsuiker te laag. Geen insuline toegediend.")
        } else if glucoseValue > upperThreshold {
            let insulinDose = calculateInsulinDose(for: glucoseValue)
            deliverInsulin(dose: insulinDose)
        } else {
            print("Bloedsuiker binnen het normale bereik.")
        }
    }

    func calculateInsulinDose(for glucoseValue: Double) -> Double {
        return (glucoseValue - upperThreshold) * 0.5
    }

    func deliverInsulin(dose: Double) {
        print("Insuline dosis van \(dose) eenheden toegediend.")
    }
}